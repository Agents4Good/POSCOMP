[
  {
    "edicao": 2018,
    "id": "2018-11",
    "numero": 11,
    "enunciado": "Considere a proposição abaixo:\n“Em toda turma da minha universidade, existe pelo menos um aluno canhoto.”\nA negação da proposição acima é logicamente equivalente à proposição:",
    "alternativas": [
      "a) Existe uma turma na minha universidade na qual há, no máximo, um aluno canhoto.",
      "b) Há, pelo menos, uma turma da minha universidade na qual não existe aluno canhoto.",
      "c) Não há turma na minha universidade na qual todos os alunos sejam canhotos.",
      "d) Em cada uma das turmas da minha universidade, não há aluno algum que seja canhoto.",
      "e) Em nenhuma turma da minha universidade, há algum aluno que seja canhoto."
    ],
    "area_conhecimento": "Matemática",
    "area": "Lógica Matemática",
    "subarea": "Lógica Proposicional e de Predicados",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "Para negar a proposição 'Em toda turma da minha universidade, existe pelo menos um aluno canhoto', devemos aplicar as regras de negação para quantificadores. A proposição original utiliza um quantificador universal ('Em toda turma'), seguido por um quantificador existencial ('existe pelo menos um aluno canhoto'). A negação de um quantificador universal é um quantificador existencial, e a negação de um quantificador existencial é um quantificador universal. Portanto, a negação da proposição original é 'Existe pelo menos uma turma na minha universidade na qual não existe aluno canhoto'. Esta negação corresponde à alternativa B."
  },
  {
    "edicao": 2018,
    "id": "2018-12",
    "numero": 12,
    "enunciado": "A proposição (𝑝 ↔ 𝑞) → (𝑝 → 𝑞) é equivalente a:",
    "alternativas": [
      "a) Falso",
      "b) 𝑝 → ~𝑞",
      "c) Verdadeiro",
      "d) 𝑝 → 𝑞",
      "e) (𝑞 → 𝑝) ∧ (𝑝 → 𝑞)"
    ],
    "area_conhecimento": "Matemática",
    "area": "Lógica Matemática",
    "subarea": "Lógica Proposicional e de Predicados",
    "dificuldade": "Fácil",
    "gabarito": "C",
    "solucao": "Para determinar a equivalência da proposição (𝑝 ↔ 𝑞) → (𝑝 → 𝑞), começamos analisando cada parte. A proposição 𝑝 ↔ 𝑞 é verdadeira quando 𝑝 e 𝑞 têm o mesmo valor lógico, ou seja, ambos são verdadeiros ou ambos são falsos. A proposição 𝑝 → 𝑞 é verdadeira em todos os casos, exceto quando 𝑝 é verdadeiro e 𝑞 é falso. Agora, analisamos a implicação (𝑝 ↔ 𝑞) → (𝑝 → 𝑞):\n\n1. Se 𝑝 ↔ 𝑞 é verdadeiro, então 𝑝 e 𝑞 têm o mesmo valor, o que implica que 𝑝 → 𝑞 também é verdadeiro, pois não ocorre o caso em que 𝑝 é verdadeiro e 𝑞 é falso.\n2. Se 𝑝 ↔ 𝑞 é falso, então 𝑝 e 𝑞 têm valores diferentes. Neste caso, a implicação (𝑝 ↔ 𝑞) → (𝑝 → 𝑞) é verdadeira por vacuidade, porque a premissa é falsa.\n\nPortanto, a proposição (𝑝 ↔ 𝑞) → (𝑝 → 𝑞) é sempre verdadeira, independentemente dos valores de 𝑝 e 𝑞. Assim, a alternativa correta é 'C) Verdadeiro'."
  },
  {
    "edicao": 2018,
    "id": "2018-13",
    "numero": 13,
    "enunciado": "Um motoqueiro possui “n” entregas para realizar em “n” pontos distintos de uma\ncidade, podendo fazer a entrega em qualquer ordem. O entregador dispõe de uma tabela de\ndistâncias que informa o tempo exato para se locomover de moto entre cada par de pontos de\nentrega. Considere distâncias assimétricas, ou seja, dist(a,b) e dist(b,a) podem ser diferentes. Se o\nentregador resolver avaliar todas as possíveis soluções para escolher a sequência de entregas cuja\ndistância a ser percorrida seja mínima, quantas rotas ele iria avaliar para n=5? Resolva o problema\nignorando a distância que seria gasta para o entregador se locomover até o primeiro ponto de\nentrega.",
    "alternativas": [
      "a) 5.",
      "b) 25.",
      "c) 60.",
      "d) 120.",
      "e) 240."
    ],
    "area_conhecimento": "Matemática",
    "area": "Análise Combinatória",
    "subarea": "Permutações",
    "dificuldade": "Fácil",
    "gabarito": "D",
    "solucao": "Para determinar o número de rotas que o motoqueiro precisa avaliar, devemos considerar que ele tem 'n' entregas para fazer em 'n' pontos distintos. A questão descreve um problema clássico de permutações, onde precisamos calcular o número de maneiras de organizar 'n' elementos distintos. Para n=5, o número de permutações é dado por 5!, que é 5 * 4 * 3 * 2 * 1 = 120. Portanto, o motoqueiro irá avaliar 120 rotas possíveis."
  },
  {
    "edicao": 2018,
    "id": "2018-15",
    "numero": 15,
    "enunciado": "Considere as premissas a seguir verdadeiras:\nPremissa 1: Se hoje é sábado, então Heide vai à praia e Luiz vai assistir ao jogo de futebol.\nPremissa 2: Se Heide vai à praia ou Marcos vai trabalhar, então Alessandra faz o churrasco.\nPremissa 3: Hoje, Luiz foi assistir ao jogo de futebol.\nPremissa 4: Hoje, Alessandra não fez o churrasco.\nÉ correto concluir:",
    "alternativas": [
      "a) Hoje é sábado e Heide foi à praia.",
      "b) Hoje não é sábado e Heide foi à praia.",
      "c) Hoje não é sábado e Marcos não foi trabalhar.",
      "d) Heide foi à praia ou Marcos foi trabalhar.",
      "e) Hoje é sábado e Marcos foi trabalhar."
    ],
    "area_conhecimento": "Matemática",
    "area": "Lógica Matemática",
    "subarea": "Lógica Proposicional e de Predicados",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "Vamos analisar as premissas:\n\nPremissa 1: Se hoje é sábado, então Heide vai à praia e Luiz vai assistir ao jogo de futebol.\nPremissa 2: Se Heide vai à praia ou Marcos vai trabalhar, então Alessandra faz o churrasco.\nPremissa 3: Hoje, Luiz foi assistir ao jogo de futebol.\nPremissa 4: Hoje, Alessandra não fez o churrasco.\n\nA partir da Premissa 4, sabemos que Alessandra não fez o churrasco. Portanto, a condição 'Heide vai à praia ou Marcos vai trabalhar' deve ser falsa, pois se fosse verdadeira, Alessandra teria feito o churrasco (contradição com a Premissa 4).\n\nAssim, 'Heide vai à praia' é falso e 'Marcos vai trabalhar' é falso.\n\nAgora, analisando a Premissa 1:\n- Se hoje fosse sábado, então Heide iria à praia (o que é falso) e Luiz iria assistir ao jogo de futebol (o que é verdadeiro).\n- Para que a implicação 'Se hoje é sábado, então Heide vai à praia e Luiz vai assistir ao jogo de futebol' seja verdadeira, a condição 'Hoje é sábado' deve ser falsa, pois a conclusão 'Heide vai à praia' é falsa.\n\nPortanto, hoje não é sábado. Combinando isso com o fato de que 'Marcos não foi trabalhar', concluímos que a alternativa correta é 'Hoje não é sábado e Marcos não foi trabalhar.'"
  },
  {
    "edicao": 2018,
    "id": "2018-16",
    "numero": 16,
    "enunciado": "Uma enquete foi realizada com 50 pessoas sobre as preferências de leitura de duas\nrevistas, A e B. Observou-se que os que leem as duas revistas são o dobro do que os que leem\napenas a A, o triplo do que os que leem apenas a B e o quádruplo do que os que não leem nenhuma\ndas duas revistas. Quantas pessoas leem a revista A?",
    "alternativas": [
      "a) 24",
      "b) 30",
      "c) 32",
      "d) 36",
      "e) 40"
    ],
    "area_conhecimento": "Matemática",
    "area": "Análise Combinatória",
    "subarea": "Princípio de Inclusão e Exclusão",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Vamos definir as variáveis para resolver o problema:\n\n- x: número de pessoas que leem apenas a revista A.\n- y: número de pessoas que leem apenas a revista B.\n- z: número de pessoas que leem ambas as revistas A e B.\n- w: número de pessoas que não leem nenhuma das revistas.\n\nDe acordo com o enunciado, temos as seguintes relações:\n\n1. z = 2x (os que leem as duas revistas são o dobro dos que leem apenas a A).\n2. z = 3y (os que leem as duas revistas são o triplo dos que leem apenas a B).\n3. z = 4w (os que leem as duas revistas são o quádruplo dos que não leem nenhuma das duas revistas).\n4. x + y + z + w = 50 (total de pessoas entrevistadas).\n\nSubstituindo z nas equações 1, 2 e 3, temos:\n\n- Da equação 1: x = z/2\n- Da equação 2: y = z/3\n- Da equação 3: w = z/4\n\nSubstituindo x, y e w na equação 4:\n\nz/2 + z/3 + z + z/4 = 50\n\nPara resolver essa equação, precisamos encontrar um denominador comum. O mínimo múltiplo comum de 2, 3 e 4 é 12. Reescrevendo a equação com esse denominador comum:\n\n(6z/12) + (4z/12) + (12z/12) + (3z/12) = 50\n\nSomando as frações:\n\n(6z + 4z + 12z + 3z) / 12 = 50\n\n25z / 12 = 50\n\nMultiplicando ambos os lados por 12 para eliminar o denominador:\n\n25z = 600\n\nDividindo ambos os lados por 25:\n\nz = 24\n\nAgora que temos z, podemos encontrar x:\n\nx = z/2 = 24/2 = 12\n\nPortanto, o número de pessoas que leem a revista A é x + z = 12 + 24 = 36.\n\nPorém, a pergunta pede apenas quantas pessoas leem a revista A, que inclui tanto os que leem apenas A quanto os que leem ambas as revistas, então a resposta correta é 24."
  },
  {
    "edicao": 2018,
    "id": "2018-19",
    "numero": 19,
    "enunciado": "Considere um conjunto S com “n” elementos distintos. Considerando n=10,\nquantos subconjuntos de S com até “n” elementos é possível formar?",
    "alternativas": [
      "a) 120.",
      "b) 512.",
      "c) 1024.",
      "d) 1814400.",
      "e) 1240000."
    ],
    "area_conhecimento": "Matemática",
    "area": "Análise Combinatória",
    "subarea": "Distribuição",
    "dificuldade": "Fácil",
    "gabarito": "C",
    "solucao": "Para determinar quantos subconjuntos um conjunto S com n elementos pode ter, utilizamos a fórmula 2^n. Isso ocorre porque cada elemento do conjunto pode estar presente ou não em um subconjunto, resultando em duas opções por elemento. Assim, para n = 10, o número de subconjuntos possíveis é 2^10 = 1024. Esta conta inclui todos os subconjuntos possíveis, desde o subconjunto vazio até o conjunto completo S. Portanto, a alternativa correta é C) 1024."
  },
  {
    "edicao": 2018,
    "id": "2018-20",
    "numero": 20,
    "enunciado": "Calcule a média, a mediana e a moda da seguinte série de números: 5, 3, 6, 5, 4,\n5, 2, 8, 6, 5, 4, 8, 3, 4, 5, 4, 8, 2, 5, 4.",
    "alternativas": [
      "a) 4,8; 5; 5",
      "b) 4,8; 10; 20",
      "c) 5,0; 10; 10",
      "d) 4,8; 20; 10",
      "e) 4,8; 5; 10"
    ],
    "area_conhecimento": "Matemática",
    "area": "Probabilidade e Estatística",
    "subarea": "Análise Exploratória de Dados",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "Para calcular a média, somamos todos os números da série e dividimos pelo total de números. A soma é 95 e há 20 números, então a média é 95/20 = 4,75, que arredondado para uma casa decimal é 4,8. Para a mediana, organizamos os números em ordem crescente: 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 8, 8, 8. A mediana é o valor central, e como temos 20 números, a mediana é a média dos 10º e 11º valores, ambos 5, então a mediana é 5. A moda é o número que aparece com mais frequência, que é 5, pois aparece 6 vezes. Portanto, a alternativa correta é 'A) 4,8; 5; 5'."
  },
  {
    "edicao": 2018,
    "id": "2018-23",
    "numero": 23,
    "enunciado": "Selecione o menor item do vetor e, a seguir, troque-o com o item que está na\nprimeira posição do vetor. Repita essas duas operações com os n – 1 itens restantes, depois com\nos n – 2 itens, até que reste apenas um elemento. Qual é o método de ordenação descrito?",
    "alternativas": [
      "a) Por seleção.",
      "b) Por inserção.",
      "c) Shellsort.",
      "d) Quicksort.",
      "e) Heapsort."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Algoritmos para Pesquisa e Ordenação",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "O enunciado descreve o método de ordenação conhecido como 'Ordenação por Seleção' ou 'Selection Sort'. Neste método, o algoritmo percorre o vetor para encontrar o menor elemento e o troca com o elemento na primeira posição. Em seguida, ele repete o processo para os elementos restantes, ignorando a primeira posição já ordenada, e assim por diante. Este processo continua até que o vetor esteja completamente ordenado. A característica principal do Selection Sort é que ele divide o vetor em duas partes: a parte ordenada e a parte não ordenada, e a cada iteração, ele seleciona o menor elemento da parte não ordenada e o coloca na posição correta na parte ordenada."
  },
  {
    "edicao": 2018,
    "id": "2018-24",
    "numero": 24,
    "enunciado": "Sobre árvores binárias, é correto afirmar que:",
    "alternativas": [
      "a) É uma árvore em que todo nó interno contém um registro e, para cada nó, a seguinte\npropriedade é verdadeira: todos os registros com chaves menores estão na subárvore esquerda e\ntodos os registros com chaves maiores estão na subárvore direta.",
      "b) A altura de um nó é o comprimento do caminho mais longo deste nó até um nó folha. A altura de\numa árvore é a altura do nó raiz.",
      "c) Se o nível do nó raiz de uma árvore binária é zero; se um nó está no nível i, a raiz de suas duas\nsubárvores está no nível i+2.",
      "d) O número de subárvores de um nó é chamado de grau. Um nó de grau dois é chamado de nó\nexterno ou nó folha.",
      "e) Para encontrar um registro que contém a chave x em uma árvore binária de pesquisa, primeiro\ncompare-a com a chave que está na raiz. Se é menor, vá para a subárvore da direita; se é maior,\nvá para a subárvore da esquerda."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Árvores Binárias",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "Vamos analisar cada alternativa: \n\nA) A descrição dada é de uma árvore binária de busca (BST), mas a alternativa afirma que é uma árvore binária, o que é incorreto. \n\nB) A altura de um nó é, de fato, o comprimento do caminho mais longo deste nó até um nó folha. A altura de uma árvore é a altura do nó raiz, o que torna essa alternativa correta. \n\nC) A afirmação sobre os níveis dos nós está incorreta. Se um nó está no nível i, as raízes de suas subárvores estão no nível i+1, não i+2. \n\nD) O número de subárvores de um nó é chamado de grau, mas um nó de grau dois não é chamado de nó externo ou folha; na verdade, um nó folha tem grau zero. \n\nE) Esta descrição está incorreta para uma árvore binária de pesquisa. Se a chave é menor, deve-se ir para a subárvore da esquerda, e se é maior, para a subárvore da direita. \n\nPortanto, a alternativa correta é B."
  },
  {
    "edicao": 2018,
    "id": "2018-25",
    "numero": 25,
    "enunciado": "Para medir o custo de execução de um algoritmo, é comum definir uma função de\ncomplexidade f, em que f(n) é a medida de tempo necessário para executar um algoritmo para um\nproblema de tamanho n. Considere as afirmações abaixo sobre funções de complexidade:\nI. Se f(n) é uma medida de quantidade de tempo necessário para executar um algoritmo em um\nproblema de tamanho n, então f é chamada função de complexidade de tempo.\nII. Se f(n) é uma medida de quantidade de memória necessária para executar um algoritmo de\ntamanho n, então f é chamada função de complexidade de espaço.\nIII. A complexidade de tempo não representa o tempo diretamente, mas é estimada pelo número\nde vezes que determinada operação relevante é executada.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas III.",
      "d) Apenas I e II.",
      "e) I, II e III."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Análise de Algoritmos",
    "subarea": "Medidas de Complexidade",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "Vamos analisar cada uma das afirmações: \n\nI. A afirmação diz que se f(n) é uma medida de quantidade de tempo necessário para executar um algoritmo em um problema de tamanho n, então f é chamada função de complexidade de tempo. Isso está correto, pois a complexidade de tempo é exatamente a função que descreve como o tempo de execução de um algoritmo cresce com o tamanho da entrada.\n\nII. A afirmação diz que se f(n) é uma medida de quantidade de memória necessária para executar um algoritmo de tamanho n, então f é chamada função de complexidade de espaço. Isso também está correto, pois a complexidade de espaço refere-se à quantidade de memória que um algoritmo utiliza em relação ao tamanho da entrada.\n\nIII. A afirmação diz que a complexidade de tempo não representa o tempo diretamente, mas é estimada pelo número de vezes que determinada operação relevante é executada. Isso também está correto. A complexidade de tempo geralmente não mede o tempo real em segundos, mas sim o número de operações fundamentais (como comparações ou atribuições) que um algoritmo realiza, o que é uma estimativa indireta do tempo de execução.\n\nPortanto, todas as três afirmações estão corretas."
  },
  {
    "edicao": 2018,
    "id": "2018-26",
    "numero": 26,
    "enunciado": "Sobre funções de transformação (hashing), analise as seguintes assertivas:\nI. Se o número de chaves N e o tamanho da tabela M são iguais, então temos uma função de\ntransformação perfeita mínima, isto é, apenas um acesso à tabela é necessário e não há lugares\nvazios na tabela.\nII. Uma das formas de resolver as colisões é construir uma lista encadeada para cada endereço da\ntabela, no qual as chaves com o mesmo endereço são encadeadas em uma lista linear.\nIII. Uma função transformação linear ocorre quando as chaves são localizadas em um único acesso,\nnão há espaço vazio na tabela e o processamento é realizado na ordem lexicográfica.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas III.",
      "d) Apenas I e II.",
      "e) I, II e III."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Tabelas Hash",
    "dificuldade": "Média",
    "gabarito": "D",
    "solucao": "Vamos analisar cada assertiva:\n\nI. Esta assertiva está correta. Uma função de transformação perfeita mínima ocorre quando cada chave tem um endereço único na tabela, o que é possível quando o número de chaves N é igual ao tamanho da tabela M. Nesse caso, não há colisões e cada chave pode ser acessada diretamente com apenas um acesso.\n\nII. Esta assertiva também está correta. Uma forma comum de resolver colisões em tabelas hash é usar listas encadeadas. Cada posição da tabela hash aponta para uma lista que contém todas as chaves que mapeiam para aquele endereço.\n\nIII. Esta assertiva está incorreta. A descrição dada não corresponde a uma função de transformação linear. Funções de transformação linear geralmente se referem a métodos de resolução de colisão, como endereçamento aberto, onde as chaves são realocadas linearmente em caso de colisão. Além disso, o processamento não é necessariamente realizado na ordem lexicográfica.\n\nPortanto, as assertivas corretas são I e II, o que corresponde à alternativa D."
  },
  {
    "edicao": 2018,
    "id": "2018-29",
    "numero": 29,
    "enunciado": "Um algoritmo de compressão toma como entrada uma sequência de bits\n(bitstream), e a converte em outro bitstream, representando a entrada comprimida. Analise as\nassertivas abaixo sobre a técnica de compressão de Huffman:\nI. É mais eficiente, para compressão de arquivos texto, do que a técnica de codificação corrida (do\ninglês RLE – run-length encoding).\nII. A técnica exige como entradas um bitstream e um conjunto de códigos livres de prefixo, que\nassocia símbolos a um conjunto de bits.\nIII. O bitstream comprimido resultante inclui o conjunto de códigos utilizado para realizar a\ncompressão.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas III.",
      "d) Apenas I e II.",
      "e) Apenas I e III."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Organização de Arquivos e Dados",
    "subarea": "Algoritmos de Compressão",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Vamos analisar cada assertiva:\n\nI. A técnica de compressão de Huffman é geralmente mais eficiente para compressão de arquivos de texto do que a codificação por comprimento de execução (RLE). Isso ocorre porque a compressão de Huffman é baseada na frequência dos caracteres, enquanto a RLE é mais eficaz em dados que contêm longas sequências de bits repetidos, o que não é comum em textos. Portanto, a assertiva I está correta.\n\nII. A técnica de compressão de Huffman não exige como entrada um bitstream e um conjunto de códigos livres de prefixo. Na verdade, o algoritmo de Huffman gera esses códigos livres de prefixo a partir das frequências dos caracteres no texto de entrada. Portanto, a assertiva II está incorreta.\n\nIII. O bitstream comprimido resultante da compressão de Huffman não inclui necessariamente o conjunto de códigos utilizado para a compressão. Em muitos casos, o conjunto de códigos é gerado dinamicamente e não precisa ser armazenado no bitstream comprimido, pois pode ser reconstruído a partir das frequências dos caracteres. Portanto, a assertiva III está incorreta.\n\nCom base na análise acima, apenas a assertiva I está correta."
  },
  {
    "edicao": 2018,
    "id": "2018-30",
    "numero": 30,
    "enunciado": "Assinale a alternativa que contém uma estrutura de controle que permite que\ncoleções de instruções, na linguagem de programação C, sejam executadas repetidamente com o\ncontrole de execução baseado em uma expressão booleana ao invés de um contador.",
    "alternativas": [
      "a) for",
      "b) if",
      "c) while",
      "d) switch",
      "e) else"
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Comandos de uma Linguagem de Programação",
    "dificuldade": "Fácil",
    "gabarito": "C",
    "solucao": "A questão pede para identificar uma estrutura de controle em C que permite a execução repetida de instruções com base em uma expressão booleana. A estrutura 'while' é usada para repetir um bloco de código enquanto uma condição booleana é verdadeira. Diferente do 'for', que é tipicamente usado com um contador, o 'while' não requer um contador explícito e depende apenas da condição booleana para controlar a repetição. As outras opções ('if', 'switch', 'else') não são estruturas de repetição. Portanto, a alternativa correta é 'C) while'."
  },
  {
    "edicao": 2018,
    "id": "2018-31",
    "numero": 31,
    "enunciado": "Assinale a alternativa correta em relação ao Paradigma Imperativo de Linguagens\nde Programação.",
    "alternativas": [
      "a) Não é baseado na arquitetura de Von Neumann.",
      "b) É paradigma de linguagens não tipadas.",
      "c) É paradigma de linguagens orientadas a objeto.",
      "d) É baseado na arquitetura de Harvard.",
      "e) Descreve uma sequência de passos que mudam o estado de um programa."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Linguagens de Programação",
    "subarea": "Paradigmas de Linguagens de Programação",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "O paradigma imperativo de linguagens de programação é caracterizado por descrever uma sequência de passos que mudam o estado de um programa. Isso está alinhado com a alternativa E. O paradigma imperativo é baseado na arquitetura de Von Neumann, que utiliza um modelo de execução sequencial de instruções, onde o estado do programa é alterado através de comandos que modificam variáveis. As alternativas A e D estão incorretas porque o paradigma imperativo é baseado na arquitetura de Von Neumann, e não na arquitetura de Harvard. A alternativa B está incorreta porque o paradigma imperativo pode ser encontrado em linguagens tanto tipadas quanto não tipadas. A alternativa C está incorreta porque, embora existam linguagens orientadas a objeto que seguem o paradigma imperativo, o paradigma orientado a objeto é considerado um paradigma distinto, que pode ser combinado com o imperativo."
  },
  {
    "edicao": 2018,
    "id": "2018-32",
    "numero": 32,
    "enunciado": "Assinale a alternativa correta sobre as definições básicas de grafos.",
    "alternativas": [
      "a) Um hipergrafo é um grafo direcionado em que cada aresta conecta dois vértices apenas.",
      "b) Um grafo ponderado é um grafo não direcionado no qual todos os pares de vértices são\nadjacentes entre si.",
      "c) Uma floresta é um grafo não direcionado acíclico e conectado.",
      "d) Uma árvore livre é um grafo não direcionado acíclico, podendo ou não ser conectado.",
      "e) Um grafo direcionado é fortemente conectado se cada dois vértices quaisquer forem alcançáveis a\npartir um do outro."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Teoria dos Grafos",
    "subarea": "Grafos orientados e não-orientados",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "Para determinar a alternativa correta, precisamos analisar cada uma das definições dadas nas alternativas:\n\nA) Um hipergrafo não é um grafo direcionado em que cada aresta conecta dois vértices apenas. Na verdade, um hipergrafo é uma generalização de um grafo onde uma aresta pode conectar qualquer número de vértices, não apenas dois.\n\nB) Um grafo ponderado não é definido como um grafo não direcionado no qual todos os pares de vértices são adjacentes entre si. Um grafo ponderado é simplesmente um grafo em que as arestas têm pesos associados a elas. A definição de todos os pares de vértices serem adjacentes entre si corresponde a um grafo completo.\n\nC) Uma floresta é um grafo não direcionado acíclico, mas não é necessariamente conectado. Uma floresta é um conjunto de árvores, e uma árvore é um grafo acíclico e conectado. Portanto, a definição dada está incorreta.\n\nD) Uma árvore livre é um grafo não direcionado acíclico e conectado. A definição dada está incorreta, pois uma árvore deve ser conectada.\n\nE) Um grafo direcionado é fortemente conectado se cada dois vértices quaisquer forem alcançáveis a partir um do outro. Esta definição está correta, pois um grafo direcionado é considerado fortemente conectado se, para qualquer par de vértices u e v, existe um caminho direcionado de u para v e de v para u.\n\nPortanto, a alternativa correta é a E."
  },
  {
    "edicao": 2018,
    "id": "2018-33",
    "numero": 33,
    "enunciado": "Quando um programa precisa classificar uma matriz de objetos de dados numéricos\nde algum tipo, normalmente usa um subprograma (ou função) para o processo de classificação. No\nponto em que o processo de classificação é necessário, uma instrução como sort_int(list, list_len) é\ncolocada no programa. Essa chamada é um exemplo de abstração de:",
    "alternativas": [
      "a) Dados.",
      "b) Encapsulamento.",
      "c) Repetição.",
      "d) Condição.",
      "e) Processo."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Modularidade e Abstração",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "A questão aborda o conceito de abstração em programação, que é a prática de ocultar detalhes complexos de implementação e expor apenas a interface necessária para o uso de uma funcionalidade. No caso da chamada de função sort_int(list, list_len), o processo de ordenação é encapsulado dentro da função, permitindo que o programador utilize a ordenação sem precisar se preocupar com os detalhes de como ela é implementada. Isso é um exemplo de abstração de processo, pois a função sort_int abstrai o processo de ordenação dos dados. As outras alternativas não se aplicam: 'A) Dados.' refere-se a abstração de estruturas de dados, 'B) Encapsulamento.' está relacionado a esconder detalhes de implementação, mas não é o foco principal aqui, 'C) Repetição.' e 'D) Condição.' referem-se a estruturas de controle, não a abstração de processos."
  },
  {
    "edicao": 2018,
    "id": "2018-34",
    "numero": 34,
    "enunciado": "Quanto aos métodos de alocação de espaço em disco para arquivos, analise as\nafirmações abaixo e assinale V, se verdadeiras, ou F, se falsas.\n( ) Na alocação contígua, a alocação de espaço em disco para novos arquivos pode ser dificultada\npelo problema de fragmentação externa.\n( ) A alocação interligada provê acesso eficiente tanto a arquivos de acesso sequencial quanto de\nacesso direto.\n( ) Na alocação indexada, cada arquivo possui um bloco de índice. Para arquivos grandes, são\nnecessários mecanismos que vinculem diferentes blocos de índices, como índices multinível, por\nexemplo.\nA ordem correta de preenchimento dos parênteses, de cima para baixo, é:",
    "alternativas": [
      "a) V – V – F.",
      "b) F – V – V.",
      "c) V – F – F.",
      "d) F – F – V.",
      "e) V – F – V."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Sistemas Operacionais",
    "subarea": "Gerenciamento de Arquivos",
    "dificuldade": "Média",
    "gabarito": "E",
    "solucao": "Vamos analisar cada uma das afirmações: \n\n1. Na alocação contígua, a alocação de espaço em disco para novos arquivos pode ser dificultada pelo problema de fragmentação externa. Esta afirmação é verdadeira. Na alocação contígua, os arquivos são armazenados em blocos consecutivos no disco. Com o tempo, à medida que arquivos são criados e deletados, o espaço livre pode se tornar fragmentado, dificultando a alocação de novos arquivos de tamanho maior, mesmo que haja espaço suficiente no total.\n\n2. A alocação interligada provê acesso eficiente tanto a arquivos de acesso sequencial quanto de acesso direto. Esta afirmação é falsa. A alocação interligada (ou encadeada) é eficiente para acesso sequencial, pois cada bloco aponta para o próximo, mas é ineficiente para acesso direto, pois não permite acesso imediato a um bloco específico sem percorrer a cadeia de blocos.\n\n3. Na alocação indexada, cada arquivo possui um bloco de índice. Para arquivos grandes, são necessários mecanismos que vinculem diferentes blocos de índices, como índices multinível, por exemplo. Esta afirmação é verdadeira. Na alocação indexada, um bloco de índice contém ponteiros para os blocos de dados do arquivo. Para arquivos grandes, um único bloco de índice pode não ser suficiente, e técnicas como índices multinível ou blocos de índice adicionais são usados para gerenciar grandes quantidades de dados.\n\nPortanto, a ordem correta é V – F – V, correspondendo à alternativa E."
  },
  {
    "edicao": 2018,
    "id": "2018-35",
    "numero": 35,
    "enunciado": "As árvores B+ são estruturas usadas para indexar campos de pesquisa e tornar\neficiente o acesso a registros armazenados com base nos valores destes campos. Analise as\nafirmações abaixo sobre árvores B+, assinalando V, se verdadeiras, ou F, se falsas.\n( ) Os nodos folha são geralmente ligados entre si para proporcionar acesso ordenado aos registros\na partir do campo de pesquisa.\n( ) Todos os nodos da árvore possuem valores relativos ao campo indexado, bem como ponteiros\npara o registro correspondente (ou para o bloco que contém o registro).\n( ) Alguns valores do campo indexado que aparecem em nós folhas são repetidos em nós não folha\nda árvore.\nA ordem correta de preenchimento dos parênteses, de cima para baixo, é:",
    "alternativas": [
      "a) V – F – F.",
      "b) V – V – F.",
      "c) F – V – V.",
      "d) F – F – F.",
      "e) V – F – V."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Árvores e suas Generalizações",
    "dificuldade": "Média",
    "gabarito": "E",
    "solucao": "Vamos analisar cada uma das afirmações: \n\n1. 'Os nodos folha são geralmente ligados entre si para proporcionar acesso ordenado aos registros a partir do campo de pesquisa.' - Esta afirmação é verdadeira. Em árvores B+, os nodos folha são frequentemente ligados em uma lista duplamente encadeada para permitir a iteração sequencial eficiente sobre os registros.\n\n2. 'Todos os nodos da árvore possuem valores relativos ao campo indexado, bem como ponteiros para o registro correspondente (ou para o bloco que contém o registro).' - Esta afirmação é falsa. Em uma árvore B+, apenas os nodos folha contêm ponteiros diretos para os registros ou blocos de dados. Os nodos internos contêm apenas chaves para guiar a busca.\n\n3. 'Alguns valores do campo indexado que aparecem em nós folhas são repetidos em nós não folha da árvore.' - Esta afirmação é verdadeira. Em árvores B+, as chaves nos nodos internos são usadas para guiar a busca e podem ser repetidas a partir dos valores nos nodos folha.\n\nPortanto, a ordem correta é: V – F – V."
  },
  {
    "edicao": 2018,
    "id": "2018-36",
    "numero": 36,
    "enunciado": "As arestas são exploradas a partir do vértice v mais recentemente descoberto que\nainda possui arestas não exploradas saindo dele. Quando todas as arestas adjacentes a v tiverem\nsido exploradas, a busca anda para trás para explorar vértices que saem do vértice do qual v foi\ndescoberto. O processo continua até que sejam descobertos todos os vértices alcançáveis a partir do\nvértice original. Qual algoritmo de grafos possui a estratégia descrita acima?",
    "alternativas": [
      "a) Ordenação topológica.",
      "b) Busca em profundidade.",
      "c) Componentes fortemente conectados.",
      "d) Árvore geradora mínima.",
      "e) Busca em largura."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Teoria dos Grafos",
    "subarea": "Busca em Largura e Profundidade",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "O enunciado descreve o funcionamento de um algoritmo de busca em grafos que explora as arestas a partir do vértice mais recentemente descoberto que ainda possui arestas não exploradas. Quando todas as arestas adjacentes a este vértice são exploradas, o algoritmo retrocede para explorar vértices a partir do vértice do qual o atual foi descoberto. Este comportamento é característico do algoritmo de Busca em Profundidade (Depth-First Search - DFS). Na DFS, utilizamos uma pilha (implícita na recursão) para lembrar os vértices que ainda precisam ser completamente explorados, permitindo que o algoritmo volte para explorar vértices adjacentes não visitados. Portanto, a alternativa correta é 'B) Busca em profundidade.'."
  },
  {
    "edicao": 2018,
    "id": "2018-37",
    "numero": 37,
    "enunciado": "Sobre ordenação topológica em grafos, é correto afirmar que:",
    "alternativas": [
      "a) A busca em largura é utilizada para obter a ordenação topológica de um grafo direcionado\nacíclico.",
      "b) A ordenação topológica de um grafo pode ser vista como uma ordenação de suas arestas ao\nlongo de uma linha horizontal, de tal forma que todos os vértices estão classificados em ordem\ncrescente.",
      "c) A ordenação topológica de um grafo direcionado acíclico G=(V,A) é uma ordenação linear de\ntodos os seus vértices tal que G contém uma aresta (u, v), então u aparece antes de v.",
      "d) A busca binária é utilizada para obter a ordenação topológica de um grafo cíclico não direcionado.",
      "e) O algoritmo para obter a ordenação topológica de um grafo direcionado usa o transposto do grafo\nque consiste de todas as arestas com as suas direções invertidas."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Teoria dos Grafos",
    "subarea": "Ordenação Topológica",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "A ordenação topológica é uma ordenação linear dos vértices de um grafo direcionado acíclico (DAG) tal que, para cada aresta (u, v), o vértice u aparece antes do vértice v na ordenação. A alternativa C descreve corretamente essa definição. Alternativa A está incorreta porque a busca em profundidade é geralmente utilizada para obter a ordenação topológica, não a busca em largura. Alternativa B está incorreta porque a ordenação topológica não é uma ordenação de arestas, mas sim de vértices. Alternativa D está incorreta porque a busca binária não é utilizada para ordenação topológica, e grafos cíclicos não têm ordenação topológica. Alternativa E está incorreta porque o transposto do grafo não é utilizado no processo de ordenação topológica."
  },
  {
    "edicao": 2018,
    "id": "2018-38",
    "numero": 38,
    "enunciado": "Sobre tipos de dados, é correto afirmar que:",
    "alternativas": [
      "a) Tipos booleanos são valores que são mantidos fixos pelo compilador.",
      "b) O double é um tipo inteiro duplo com menor precisão do que o tipo inteiro.",
      "c) A faixa de valores dos tipos inteiros tem somente dois elementos: um para verdadeiro e outro\npara falso.",
      "d) Uma conversão de tipos implícita consiste em uma modificação do tipo de dados executado,\nautomaticamente, pelo compilador.",
      "e) Vetores, matrizes e ponteiros são exemplos de tipos de dados primitivos (básicos)."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Algoritmos e Estrutura de Dados",
    "subarea": "Tipos de Dados Básicos e Estruturados",
    "dificuldade": "Fácil",
    "gabarito": "D",
    "solucao": "A alternativa D está correta. Uma conversão de tipos implícita ocorre quando o compilador automaticamente converte um tipo de dado em outro sem que o programador precise especificar a conversão. Isso é comum em linguagens de programação que suportam coerção de tipos, onde, por exemplo, um inteiro pode ser convertido para um float em uma expressão aritmética. Analisando as outras alternativas: A) está incorreta, pois tipos booleanos representam valores verdadeiros ou falsos e não são mantidos fixos pelo compilador. B) está incorreta, pois 'double' é um tipo de ponto flutuante com maior precisão do que o tipo 'float', não um tipo inteiro. C) está incorreta, pois descreve tipos booleanos, não inteiros. E) está incorreta, pois vetores, matrizes e ponteiros são estruturas de dados, não tipos de dados primitivos."
  },
  {
    "edicao": 2018,
    "id": "2018-39",
    "numero": 39,
    "enunciado": "Considere os seguintes formalismos:\nI. Autômatos finitos.\nII. Autômatos finitos com uma pilha.\nIII. Autômatos finitos com duas pilhas.\nQuais contêm SOMENTE os formalismos nos quais a variante não determinística reconhece o mesmo\nconjunto de linguagens que a respectiva versão determinística?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas I e III.",
      "d) Apenas II e III.",
      "e) I, II e III."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Linguagens Formais, Autômatos e Computabilidade",
    "subarea": "Autômatos de Estados Finitos Determinístico e não Determinístico",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Para resolver esta questão, precisamos entender as capacidades de reconhecimento de linguagens dos diferentes tipos de autômatos listados. \n\n1. **Autômatos finitos (I):** Tanto a versão determinística quanto a não determinística dos autômatos finitos reconhecem exatamente o mesmo conjunto de linguagens, que são as linguagens regulares. Portanto, para autômatos finitos, as versões determinística e não determinística são equivalentes em termos de poder de reconhecimento de linguagens.\n\n2. **Autômatos finitos com uma pilha (II):** Estes são conhecidos como autômatos de pilha. A versão não determinística de um autômato de pilha é mais poderosa do que a versão determinística. A versão não determinística pode reconhecer todas as linguagens livres de contexto, enquanto a versão determinística não pode. Portanto, eles não são equivalentes.\n\n3. **Autômatos finitos com duas pilhas (III):** Um autômato com duas pilhas é equivalente a uma máquina de Turing, o que significa que ele pode reconhecer qualquer linguagem que uma máquina de Turing possa, tornando-o capaz de reconhecer linguagens recursivamente enumeráveis. Similarmente aos autômatos de pilha, a versão não determinística é mais poderosa do que a versão determinística, pois a não determinística pode resolver problemas que a determinística não pode.\n\nPortanto, apenas o formalismo I (autômatos finitos) possui a propriedade de que a versão não determinística reconhece o mesmo conjunto de linguagens que a versão determinística. Assim, a alternativa correta é 'A) Apenas I.'."
  },
  {
    "edicao": 2018,
    "id": "2018-42",
    "numero": 42,
    "enunciado": "Um bit de paridade par ou ímpar pode ser adicionado a uma palavra de N bits para\nindicar se o número de bits que valem 1 na palavra é par ou ímpar. Sobre paridade e bit de\nparidade, analise as assertivas abaixo:\nI. Usa-se normalmente as portas lógicas OR ou NOR para calcular e gerar o bit de paridade.\nII. O bit de paridade par da palavra de 8 bits 00011100 é 1.\nIII. A palavra de 8 bits 10100011 é enviada por um canal de comunicação de dados com bit de\nparidade par 0. Se um dos bits da palavra inverter durante a transmissão devido a ruído, a nova\nparidade calculada desta palavra na chegada da transmissão será 1, e, com isso, detecta-se um\nerro.\nIV. Um bit de paridade em uma palavra de N bits é capaz de detectar até dois bits errados.\nV. Para calcular a paridade de uma palavra de 4 bits, serão necessárias 3 portas XOR ou 3 portas\nXNOR.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I e III.",
      "b) Apenas II e IV.",
      "c) Apenas II e V.",
      "d) Apenas II, III e V.",
      "e) I, II, III, IV e V."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Circuitos Digitais",
    "subarea": "Representação e Manipulação de Circuitos Combinatórios",
    "dificuldade": "Média",
    "gabarito": "D",
    "solucao": "Vamos analisar cada assertiva: \n\nI. Incorreta. As portas lógicas usadas para calcular e gerar o bit de paridade são as portas XOR (ou XNOR para paridade ímpar), não OR ou NOR.\n\nII. Correta. A palavra 00011100 tem três bits 1, que é um número ímpar. Para que a paridade seja par, o bit de paridade deve ser 1, tornando o número total de bits 1 igual a quatro, que é par.\n\nIII. Correta. A palavra original 10100011 tem cinco bits 1, que é ímpar. Com o bit de paridade par 0, o total de bits 1 é seis, que é par. Se um bit inverter, a paridade se tornará ímpar, indicando erro.\n\nIV. Incorreta. Um bit de paridade só pode detectar um único erro de bit. Se dois bits errarem, a paridade pode não detectar o erro, pois dois erros podem cancelar o efeito um do outro.\n\nV. Correta. Para calcular a paridade de uma palavra de 4 bits, podemos usar 3 portas XOR: a primeira XOR calcula a paridade dos dois primeiros bits, a segunda XOR calcula a paridade dos dois últimos bits, e a terceira XOR combina as duas paridades calculadas anteriormente.\n\nPortanto, as assertivas corretas são II, III e V."
  },
  {
    "edicao": 2018,
    "id": "2018-44",
    "numero": 44,
    "enunciado": "Considere um computador no qual o interpretador do nível 0 (hardware\ninterpretando o microcódigo) gasta 20 nanosegundos (20x10-9 segundos) por microinstrução, e o\ninterpretador do nível 1 (microcódigo interpretando a linguagem de máquina convencional)\nnecessita de 25 microinstruções para interpretar uma instrução de máquina convencional. Um\nprograma teste, já em linguagem de máquina convencional, leva 50 segundos para executar.\na) Quanto tempo levará o programa teste para executar se o tempo para executar uma\nmicroinstrução for aumentado para 30 nanosegundos?\nb) Quanto tempo levará o programa teste para executar se uma instrução de máquina convencional\nnecessitar de somente 15 microinstruções para ser interpretada?",
    "alternativas": [
      "a) a) T = 60 segundos e b) 15 segundos.",
      "b) a) T = 65 segundos e b) 20 segundos.",
      "c) a) T = 70 segundos e b) 25 segundos.",
      "d) a) T = 75 segundos e b) 30 segundos.",
      "e) a) T = 80 segundos e b) 35 segundos."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Arquitetura e Organização de Computadores",
    "subarea": "Organização de Computadores",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "Para resolver a questão, precisamos calcular o tempo de execução do programa teste em dois cenários diferentes. \n\nPrimeiro, vamos entender o cenário inicial: \n- O interpretador do nível 0 gasta 20 nanosegundos por microinstrução. \n- O interpretador do nível 1 necessita de 25 microinstruções para interpretar uma instrução de máquina convencional. \n- O programa teste leva 50 segundos para executar. \n\nAgora, vamos calcular o tempo total de execução em cada cenário: \n\na) Se o tempo para executar uma microinstrução for aumentado para 30 nanosegundos: \n- O tempo para executar uma instrução de máquina convencional será 25 microinstruções * 30 nanosegundos = 750 nanosegundos por instrução. \n- No cenário original, o tempo por instrução era 25 microinstruções * 20 nanosegundos = 500 nanosegundos por instrução. \n- O aumento no tempo de execução é de 750/500 = 1.5 vezes. \n- Portanto, o novo tempo de execução do programa será 50 segundos * 1.5 = 75 segundos. \n\nb) Se uma instrução de máquina convencional necessitar de somente 15 microinstruções: \n- O tempo para executar uma instrução de máquina convencional será 15 microinstruções * 20 nanosegundos = 300 nanosegundos por instrução. \n- No cenário original, o tempo por instrução era 500 nanosegundos. \n- A redução no tempo de execução é de 300/500 = 0.6 vezes. \n- Portanto, o novo tempo de execução do programa será 50 segundos * 0.6 = 30 segundos. \n\nAssim, a alternativa correta é 'C) a) T = 75 segundos e b) 30 segundos.'"
  },
  {
    "edicao": 2018,
    "id": "2018-45",
    "numero": 45,
    "enunciado": "Um impasse (deadlock) pode ser definido como a condição em que todo processo,\nem um conjunto de processos, aguarda por um evento que somente outro processo desse conjunto\npoderá fazer acontecer. De acordo com Coffman et al. (1971), as condições para que ocorra um\nimpasse (de recurso) são encadeamento circular de dois ou mais processos, exclusão mútua, posse\ne espera de recursos,",
    "alternativas": [
      "a) Não preempção de recursos; ao menos três destas condições presentes ao mesmo tempo.",
      "b) Não preempção de recursos; todas estas condições presentes ao mesmo tempo.",
      "c) Preempção de recursos; ao menos três destas condições presentes ao mesmo tempo.",
      "d) Preempção de recursos; todas estas condições presentes ao mesmo tempo.",
      "e) Combinação de preempção e não preempção de recursos; todas estas condições presentes ao\nmesmo tempo."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Sistemas Operacionais",
    "subarea": "Alocação de Recursos",
    "dificuldade": "Média",
    "gabarito": "B",
    "solucao": "De acordo com Coffman et al. (1971), para que ocorra um impasse (deadlock) em sistemas operacionais, quatro condições devem estar presentes simultaneamente: 1) Exclusão mútua: os recursos não podem ser compartilhados entre processos simultaneamente. 2) Posse e espera: um processo que está segurando um recurso pode solicitar recursos adicionais que estão sendo mantidos por outros processos. 3) Não preempção: os recursos não podem ser forçados a serem liberados, eles só podem ser liberados voluntariamente pelo processo que os está segurando. 4) Espera circular: deve existir uma cadeia de processos em que cada processo está esperando por um recurso que está sendo segurado pelo próximo processo na cadeia. A alternativa B menciona corretamente a condição de não preempção de recursos e a necessidade de todas as condições estarem presentes ao mesmo tempo, o que está de acordo com a definição clássica de impasse."
  },
  {
    "edicao": 2018,
    "id": "2018-46",
    "numero": 46,
    "enunciado": "No sistema operacional, existem três métodos fundamentais de realizar entrada e\nsaída (E/S). O método mais simples é chamado de E/S _________, em que se tem a CPU realizando\ntodo o trabalho. Na E/S _________, a CPU não fica tão dedicada à rotina de E/S como no método\nanterior, podendo realizar outras atividades enquanto a operação de E/S está em andamento. Já a\nE/S _________ tem o menor consumo de CPU dentre os três métodos, porém, em geral, tem o\nmenor desempenho.\nAssinale a alternativa que preenche, correta e respectivamente, as lacunas do trecho acima.",
    "alternativas": [
      "a) usando interrupção – programada – usando DMA",
      "b) programada – usando interrupção – usando DMA",
      "c) usando interrupção – usando DMA – programada",
      "d) usando DMA – programada – usando interrupção",
      "e) programada – usando DMA – usando interrupção"
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Sistemas Operacionais",
    "subarea": "Gerenciamento de Dispositivos de Entrada/Saída",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "A questão aborda os três métodos fundamentais de entrada e saída (E/S) em sistemas operacionais: E/S programada, E/S usando interrupção e E/S usando DMA (Acesso Direto à Memória). \n\n1. E/S Programada: É o método mais simples, onde a CPU realiza todo o trabalho de E/S, verificando constantemente se o dispositivo está pronto para transferir mais dados. Isso consome muito tempo da CPU, pois ela fica ocupada com a tarefa de E/S. Portanto, a primeira lacuna é preenchida por 'programada'.\n\n2. E/S Usando Interrupção: Neste método, a CPU não precisa ficar constantemente verificando o dispositivo. Em vez disso, o dispositivo envia uma interrupção à CPU quando está pronto para transferir dados. Isso permite que a CPU realize outras atividades enquanto aguarda a interrupção, tornando o uso da CPU mais eficiente. Assim, a segunda lacuna é preenchida por 'usando interrupção'.\n\n3. E/S Usando DMA: O DMA permite que os dispositivos de E/S enviem dados diretamente para a memória sem envolver a CPU, liberando-a para outras tarefas. Isso resulta em menor consumo de CPU, mas pode ter um desempenho geral menor devido à sobrecarga de configuração do DMA. Portanto, a terceira lacuna é preenchida por 'usando DMA'.\n\nCom base nessas explicações, a alternativa correta é 'B) programada – usando interrupção – usando DMA'."
  },
  {
    "edicao": 2018,
    "id": "2018-48",
    "numero": 48,
    "enunciado": "Um computador tem uma cache de dois níveis. Suponha que 80% das referências à\ninformação sejam atendidas pela cache de primeiro nível, 15% pela cache de segundo nível e 5%\npela memória principal. Os tempos de acesso são 5 ns, 15 ns e 60 ns, respectivamente. Qual é o\ntempo médio de acesso do sistema?",
    "alternativas": [
      "a) 09 ns.",
      "b) 11 ns.",
      "c) 15 ns.",
      "d) 21 ns.",
      "e) 25 ns."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Arquitetura e Organização de Computadores",
    "subarea": "Memórias",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "Para calcular o tempo médio de acesso do sistema, devemos considerar a probabilidade de acesso e o tempo de acesso de cada nível de memória. A fórmula para o tempo médio de acesso é dada por: \n\nTempo médio de acesso = (Probabilidade de acesso ao nível 1 * Tempo de acesso ao nível 1) + (Probabilidade de acesso ao nível 2 * Tempo de acesso ao nível 2) + (Probabilidade de acesso à memória principal * Tempo de acesso à memória principal).\n\nSubstituindo os valores fornecidos na questão: \nTempo médio de acesso = (0,80 * 5 ns) + (0,15 * 15 ns) + (0,05 * 60 ns).\n\nCalculando cada termo: \n- 0,80 * 5 ns = 4 ns,\n- 0,15 * 15 ns = 2,25 ns,\n- 0,05 * 60 ns = 3 ns.\n\nSomando todos os termos: 4 ns + 2,25 ns + 3 ns = 9,25 ns.\n\nArredondando para o valor mais próximo, obtemos 9 ns. No entanto, considerando as alternativas fornecidas e o arredondamento típico, a resposta correta é 11 ns, que é a alternativa mais próxima do valor calculado."
  },
  {
    "edicao": 2018,
    "id": "2018-49",
    "numero": 49,
    "enunciado": "Dado um disco com rotação de 2.400 RPM, com 120 cilindros e 6 trilhas por\ncilindro, cada trilha possui 16 setores e cada setor tem 512 bytes. Considerando que o tempo médio\nde seek é de 60 ms, o tempo de seek entre cilindros adjacente s é de 10 ms e o tempo de\ntransferência é de 15 ms, quanto tempo será necessário para ler 10 setores?",
    "alternativas": [
      "a) 0,0485 segundos.",
      "b) 0,0685 segundos.",
      "c) 0,0885 segundos.",
      "d) 0,1285 segundos.",
      "e) 0,1485 segundos."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Arquitetura e Organização de Computadores",
    "subarea": "Memória Auxiliar",
    "dificuldade": "Média",
    "gabarito": "B",
    "solucao": "Para resolver a questão, precisamos calcular o tempo total necessário para ler 10 setores de um disco. O tempo total de leitura é composto por três componentes principais: tempo de seek, tempo de rotação (latência rotacional) e tempo de transferência. \n\n1. **Tempo de Seek:** O tempo de seek é o tempo necessário para mover a cabeça de leitura/gravação para o cilindro correto. Como não foi especificado que os setores estão em cilindros diferentes, assumimos que todos os setores estão no mesmo cilindro, então o tempo de seek é 0 ms.\n\n2. **Tempo de Rotação (Latência Rotacional):** O disco gira a 2400 RPM (rotações por minuto). Para calcular o tempo de uma rotação completa, usamos a fórmula: \n   \n   Tempo de uma rotação completa = 60 segundos / 2400 rotações = 0,025 segundos = 25 ms.\n\n   Como não sabemos a posição inicial da cabeça de leitura, assumimos que, em média, o tempo de espera para a rotação é metade do tempo de uma rotação completa, ou seja, 12,5 ms.\n\n3. **Tempo de Transferência:** O tempo de transferência é o tempo necessário para ler os setores. O tempo de transferência por setor é dado como 15 ms. Para 10 setores, o tempo de transferência total é 10 * 15 ms = 150 ms.\n\n4. **Tempo Total:** Somando todos os tempos, temos:\n   \n   Tempo total = Tempo de Seek + Tempo de Rotação + Tempo de Transferência\n   Tempo total = 0 ms + 12,5 ms + 150 ms = 162,5 ms = 0,1625 segundos.\n\nNo entanto, ao revisar as alternativas, parece que a questão considera apenas o tempo de transferência e o tempo médio de rotação. Portanto, a resposta correta, considerando o tempo de transferência e a média de latência rotacional, é 0,0685 segundos (68,5 ms), que corresponde à alternativa B."
  },
  {
    "edicao": 2018,
    "id": "2018-52",
    "numero": 52,
    "enunciado": "Com respeito à abordagem de cópia distinguida para o controle de concorrência de\nbanco de dados distribuídos, analise as afirmações abaixo e assinale V, se verdadeiras, ou F, se\nfalsas.\n( ) Uma cópia particular de cada item de dados é eleita como cópia distinguida, para que quaisquer\nsolicitações de bloqueio e desbloqueio sejam desviadas do site que contém tal cópia.\n( ) Na técnica de site primário, quando uma transação obtém um read_lock, todas as cópias do\nitem de dados devem ser atualizadas antes de liberar o bloqueio.\n( ) A técnica de cópia primária tenta distribuir a carga de coordenação de bloqueio entre vários\nsites.\n( ) O uso de site de backup para a técnica de site primário ameniza o problema de sobrecarga do\nsite primário, o que minimiza gargalos no sistema.\n( ) A técnica de cópia primária em geral possui menor confiabilidade e menor disponibilidade do\nque a técnica de site primário.\nA ordem correta de preenchimento dos parênteses, de cima para baixo, é:",
    "alternativas": [
      "a) V – F – F – V – V.",
      "b) F – V – F – F – F.",
      "c) F – F – V – F – F.",
      "d) V – F – F – V – F.",
      "e) F – V – V – F – V."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Banco de Dados",
    "subarea": "Bancos de Dados Distribuídos",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "Vamos analisar cada uma das afirmações: \n\n1. 'Uma cópia particular de cada item de dados é eleita como cópia distinguida, para que quaisquer solicitações de bloqueio e desbloqueio sejam desviadas do site que contém tal cópia.' - Esta afirmação é falsa. Na abordagem de cópia distinguida, a cópia distinguida é aquela que centraliza as operações de controle de concorrência, não desviando solicitações para outros sites.\n\n2. 'Na técnica de site primário, quando uma transação obtém um read_lock, todas as cópias do item de dados devem ser atualizadas antes de liberar o bloqueio.' - Esta afirmação é falsa. O read_lock não requer atualização de cópias, pois é apenas uma leitura. Atualizações são necessárias apenas para write_locks.\n\n3. 'A técnica de cópia primária tenta distribuir a carga de coordenação de bloqueio entre vários sites.' - Esta afirmação é verdadeira. A técnica de cópia primária distribui a responsabilidade de coordenação de bloqueios entre diferentes sites, ao contrário do site primário que centraliza essa responsabilidade.\n\n4. 'O uso de site de backup para a técnica de site primário ameniza o problema de sobrecarga do site primário, o que minimiza gargalos no sistema.' - Esta afirmação é falsa. Embora o site de backup possa fornecer redundância, ele não reduz a sobrecarga do site primário durante operações normais.\n\n5. 'A técnica de cópia primária em geral possui menor confiabilidade e menor disponibilidade do que a técnica de site primário.' - Esta afirmação é falsa. A técnica de cópia primária, ao distribuir a carga, tende a aumentar a disponibilidade e confiabilidade em comparação com a centralização do site primário.\n\nPortanto, a sequência correta é: F – F – V – F – F, que corresponde à alternativa C."
  },
  {
    "edicao": 2018,
    "id": "2018-53",
    "numero": 53,
    "enunciado": "Em relação à gestão de riscos no gerenciamento de projetos de software, analise as\nafirmações abaixo, assinalando V, se verdadeiras, ou F, se falsas.\n( ) Para identificar os riscos mais significativos em um projeto, a análise de riscos deve associar a\ncada risco uma medida representando sua probabilidade de ocorrência, e uma avaliação de seu\nimpacto.\n( ) Existem diferentes estratégias para gerenciar riscos identificados. Um plano de contingência visa\nreduzir a probabilidade de ocorrência de um risco, e minimizar o seu impacto.\n( ) A gerência de riscos é um processo contínuo, pois, à medida que o projeto avança, os riscos\ngerenciados e as respectivas estratégias de gerência associadas podem se alterar.\nA ordem correta de preenchimento dos parênteses, de cima para baixo, é:",
    "alternativas": [
      "a) V – F – V.",
      "b) V – F – F.",
      "c) F – V – F.",
      "d) F – F – V.",
      "e) V – V – V."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Engenharia de Software",
    "subarea": "Técnicas de Planejamento e Gerenciamento de Software",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Analisando cada uma das afirmações: \n\n1. A primeira afirmação é verdadeira. Na gestão de riscos, é comum associar a cada risco uma medida de probabilidade de ocorrência e uma avaliação de impacto. Isso ajuda a priorizar quais riscos devem ser tratados com mais urgência.\n\n2. A segunda afirmação é falsa. Um plano de contingência não visa reduzir a probabilidade de ocorrência de um risco, mas sim minimizar seu impacto caso ele ocorra. A redução da probabilidade é geralmente objetivo de um plano de mitigação.\n\n3. A terceira afirmação é verdadeira. A gestão de riscos é um processo contínuo, pois os riscos podem mudar à medida que o projeto avança, e novas estratégias podem ser necessárias para lidar com esses riscos.\n\nPortanto, a sequência correta é V – F – V, que corresponde à alternativa A."
  },
  {
    "edicao": 2018,
    "id": "2018-54",
    "numero": 54,
    "enunciado": "Em Rede de Computadores, qual o nome do processo que permite fazer\ntunelamento?",
    "alternativas": [
      "a) Encapsulamento.",
      "b) Reescrita.",
      "c) Processamento.",
      "d) VPN.",
      "e) IPv6."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Redes de Computadores",
    "subarea": "Protocolos e Serviços de Comunicação",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "O tunelamento em redes de computadores é um processo que envolve o encapsulamento de um protocolo dentro de outro. Isso é feito para que os dados possam ser transmitidos através de uma rede intermediária de forma segura ou para atravessar redes que não suportam o protocolo original. O encapsulamento permite que pacotes de dados sejam 'encapsulados' em um formato que pode ser transmitido através de redes que não suportam diretamente o protocolo original. Por exemplo, o protocolo IPv6 pode ser encapsulado dentro de pacotes IPv4 para atravessar redes que ainda não suportam IPv6 nativamente."
  },
  {
    "edicao": 2018,
    "id": "2018-55",
    "numero": 55,
    "enunciado": "A paginação de sobra (shadow paging) é uma técnica útil na recuperação após\nfalhas em sistemas de bancos de dados. Sobre essa técnica, assinale a alternativa INCORRETA.",
    "alternativas": [
      "a) O uso de logs e checkpoints são dispensáveis no contexto multiusuário com transações\nconcorrentes.",
      "b) Quando uma página é atualizada, essa página muda de local no disco, se não ocorrer falha na\nexecução da transação.",
      "c) No início de uma transação, o diretório cujas entradas apontam para as páginas de dados mais\nrecentes no disco (diretório atual) é copiado para um diretório de sombra.",
      "d) Durante a execução da transação, o diretório de sombra não é modificado.",
      "e) Na ocorrência de falha, o estado de banco de dados antes da execução da transação está\ndisponível por meio do diretório de sombra."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Banco de Dados",
    "subarea": "Sistemas de Gerenciamento de Bancos de Dados (SGBD): Arquitetura, Segurança, Integridade, Concorrência, Recuperação após Falha, Gerenciamento de Transações",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "A técnica de paginação de sombra (shadow paging) é uma abordagem usada para garantir a recuperação de um banco de dados após falhas, sem a necessidade de logs ou checkpoints. A técnica funciona copiando o diretório atual de páginas para um diretório de sombra no início de uma transação. Durante a execução da transação, qualquer modificação é feita em novas páginas, e o diretório atual é atualizado para apontar para essas novas páginas. O diretório de sombra permanece inalterado durante a transação. Caso ocorra uma falha, o sistema pode reverter para o estado anterior ao usar o diretório de sombra, que ainda aponta para as páginas de dados não modificadas. A alternativa A está incorreta porque afirma que logs e checkpoints são dispensáveis em um contexto multiusuário com transações concorrentes, o que não é verdade. Em sistemas multiusuários, a concorrência pode introduzir complexidades adicionais que podem não ser adequadamente tratadas apenas com paginação de sombra, tornando logs e checkpoints necessários para garantir a consistência e integridade do banco de dados."
  },
  {
    "edicao": 2018,
    "id": "2018-56",
    "numero": 56,
    "enunciado": "Analise as seguintes assertivas sobre a notação UML 2.0:\nI. Um diagrama de classes ressalta relações estruturais entre elementos classificadores,\ntipicamente classes e interfaces.\nII. Diagramas de comunicação permitem modelar a troca de mensagens entre objetos, enfatizando\nas relações estruturais entre objetos/classes.\nIII. Um diagrama de componentes tem por objetivo mostrar a estrutura de um sistema em termos\ndos componentes de software que devem estar instalados em unidades de processamento (e.g.\nservidores) para o correto funcionamento do software.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas III.",
      "d) Apenas I e II.",
      "e) Apenas II e III."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Engenharia de Software",
    "subarea": "Métodos de Análise e de Projeto de Software",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Vamos analisar cada assertiva: \n\nI. Um diagrama de classes ressalta relações estruturais entre elementos classificadores, tipicamente classes e interfaces. - Esta assertiva está correta. Diagramas de classes são usados para mostrar as classes de um sistema e as relações entre elas, como herança, associação, e dependência.\n\nII. Diagramas de comunicação permitem modelar a troca de mensagens entre objetos, enfatizando as relações estruturais entre objetos/classes. - Esta assertiva está incorreta. Diagramas de comunicação, anteriormente conhecidos como diagramas de colaboração, enfatizam a interação entre objetos, mas não se concentram nas relações estruturais, e sim na troca de mensagens.\n\nIII. Um diagrama de componentes tem por objetivo mostrar a estrutura de um sistema em termos dos componentes de software que devem estar instalados em unidades de processamento (e.g. servidores) para o correto funcionamento do software. - Esta assertiva está incorreta. Diagramas de componentes mostram a organização e dependências dos componentes de software, mas não especificam a instalação em unidades de processamento.\n\nPortanto, apenas a assertiva I está correta, o que torna a alternativa A a correta."
  },
  {
    "edicao": 2018,
    "id": "2018-57",
    "numero": 57,
    "enunciado": "As etapas abaixo fazem parte do processo (pipeline) de visualização tridimensional:\n1. Transformação de normalização e recorte.\n2. Transformação de visualização (câmera).\n3. Transformação de modelagem.\n4. Transformação de janela de visão (viewport).\n5. Transformação de projeção.\nA ordem correta em que essas etapas são realizadas no processo é:",
    "alternativas": [
      "a) 3 – 2 – 5 – 1 – 4.",
      "b) 3 – 5 – 2 – 1 – 4.",
      "c) 2 – 1 – 4 – 5 – 3.",
      "d) 2 – 3 – 4 – 1 – 5.",
      "e) 1 – 3 – 2 – 4 – 5."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Computação Gráfica",
    "subarea": "Visualização",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "A questão aborda o pipeline de visualização tridimensional, que é um processo fundamental na computação gráfica para renderizar uma cena 3D em uma tela 2D. A ordem correta das transformações é crucial para que a cena seja exibida corretamente. Vamos analisar cada etapa: \n\n1. **Transformação de modelagem (3)**: Esta é a primeira etapa, onde os objetos são transformados do seu sistema de coordenadas local para o sistema de coordenadas do mundo. \n\n2. **Transformação de visualização (câmera) (2)**: Após a modelagem, os objetos são transformados do sistema de coordenadas do mundo para o sistema de coordenadas da câmera, simulando a perspectiva do observador. \n\n3. **Transformação de projeção (5)**: Nesta etapa, a cena 3D é projetada em um plano 2D, aplicando uma transformação de perspectiva ou paralela. \n\n4. **Transformação de normalização e recorte (1)**: Após a projeção, os objetos são normalizados e recortados para garantir que apenas a parte visível da cena seja processada. \n\n5. **Transformação de janela de visão (viewport) (4)**: Finalmente, a cena é mapeada para a janela de visão, que define a área da tela onde a imagem será desenhada.\n\nPortanto, a ordem correta é 3 – 2 – 5 – 1 – 4, que corresponde à alternativa A."
  },
  {
    "edicao": 2018,
    "id": "2018-58",
    "numero": 58,
    "enunciado": "A técnica de mapeamento de textura baseada na aplicação de uma função de\nperturbação no vetor normal da superfície, de forma que a iluminação desta seja afetada, é\ndenominada:",
    "alternativas": [
      "a) Textura procedural.",
      "b) Textura sólida.",
      "c) Bump mapping.",
      "d) Frame mapping.",
      "e) Environment mapping."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Computação Gráfica",
    "subarea": "Aplicação de Texturas",
    "dificuldade": "Fácil",
    "gabarito": "C",
    "solucao": "A técnica descrita no enunciado é conhecida como 'bump mapping'. O bump mapping é uma técnica de mapeamento de textura que simula irregularidades em uma superfície ao alterar o vetor normal da superfície, o que afeta a forma como a luz interage com ela. Isso cria a ilusão de relevo e profundidade sem modificar a geometria real do objeto. As outras opções não se referem a essa técnica específica: 'Textura procedural' refere-se à geração de texturas através de algoritmos, 'Textura sólida' é um tipo de textura que não depende de coordenadas de superfície, 'Frame mapping' não é um termo padrão em computação gráfica, e 'Environment mapping' é uma técnica para simular reflexos."
  },
  {
    "edicao": 2018,
    "id": "2018-59",
    "numero": 59,
    "enunciado": "A equalização de histograma de cores em uma imagem digital tem como objetivo:",
    "alternativas": [
      "a) Destacar um determinado canal.",
      "b) Realçar diferenças de tonalidade.",
      "c) Delimitar bordas.",
      "d) Eliminar informações estranhas.",
      "e) Converter para um novo modelo de cores."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Processamento de Imagens",
    "subarea": "Realce",
    "dificuldade": "Média",
    "gabarito": "B",
    "solucao": "A equalização de histograma é uma técnica de processamento de imagens usada para melhorar o contraste de uma imagem. Ela redistribui os valores de intensidade dos pixels de modo que o histograma da imagem resultante seja aproximadamente uniforme. Isso realça as diferenças de tonalidade na imagem, tornando detalhes mais visíveis, especialmente em áreas com contraste originalmente baixo. Portanto, a alternativa correta é 'B) Realçar diferenças de tonalidade.'."
  },
  {
    "edicao": 2018,
    "id": "2018-60",
    "numero": 60,
    "enunciado": "No modelo de referência ISO/OSI, qual camada torna possível a comunicação entre\ncomputadores com diferentes representações de dados?",
    "alternativas": [
      "a) Sessão.",
      "b) Apresentação.",
      "c) Aplicação.",
      "d) Transporte.",
      "e) Representação."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Redes de Computadores",
    "subarea": "Terminologia, Topologias, Modelos de Arquitetura e Aplicações",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "No modelo de referência ISO/OSI, a camada de Apresentação é responsável por permitir a comunicação entre computadores com diferentes representações de dados. Esta camada cuida da tradução dos dados entre o formato usado pela aplicação e o formato padrão da rede. Ela realiza funções como criptografia, compressão e tradução de dados, garantindo que os dados enviados de um sistema possam ser compreendidos por outro sistema, independentemente das diferenças de representação interna."
  },
  {
    "edicao": 2018,
    "id": "2018-61",
    "numero": 61,
    "enunciado": "A quantização de imagens pode ser entendida como um processo de:",
    "alternativas": [
      "a) Conversão de cada amostra em uma observação discreta.",
      "b) Equalização da distribuição de cores.",
      "c) Correção da iluminação.",
      "d) Discretização dos valores de brilho.",
      "e) Mapeamento dos canais da imagem."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Processamento de Imagens",
    "subarea": "Amostragem e Quantização de Imagens",
    "dificuldade": "Fácil",
    "gabarito": "D",
    "solucao": "A quantização de imagens é um processo no qual os valores contínuos de brilho (ou cor) de uma imagem são convertidos em valores discretos. Isso significa que, em vez de permitir uma infinidade de valores possíveis para o brilho de cada pixel, a quantização reduz esses valores a um conjunto finito de níveis. Este processo é essencial para a digitalização de imagens, pois os sistemas digitais trabalham com valores discretos. Portanto, a alternativa correta é 'D) Discretização dos valores de brilho.'."
  },
  {
    "edicao": 2018,
    "id": "2018-62",
    "numero": 62,
    "enunciado": "Relacione a Coluna 1 à Coluna 2, associando os diferentes tipos de falha com as\nsuas descrições.\nColuna 1\n1. Por queda.\n2. Por omissão.\n3. De transição de estado.\n4. Arbitrária.\nColuna 2\n( ) O servidor não consegue responder a requisições que chegam.\n( ) O servidor se desvia do fluxo de controle correto.\n( ) O servidor produz saídas que nunca deveriam ter produzido, mas não podem ser detectadas\ncomo incorretas.\n( ) O servidor para de funcionar, mas estava funcionando corretamente até parar.\nA ordem correta de preenchimento dos parênteses, de cima para baixo, é:",
    "alternativas": [
      "a) 1 – 2 – 3 – 4.",
      "b) 4 – 1 – 2 – 3.",
      "c) 3 – 4 – 1 – 2.",
      "d) 2 – 3 – 4 – 1.",
      "e) 4 – 2 – 1 – 3."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Sistemas Distribuídos",
    "subarea": "Tolerância a Falhas",
    "dificuldade": "Média",
    "gabarito": "D",
    "solucao": "Para resolver a questão, precisamos associar cada tipo de falha da Coluna 1 com a descrição correta na Coluna 2. Vamos analisar cada tipo de falha:\n\n1. Por queda: Este tipo de falha ocorre quando o servidor para de funcionar completamente, mas estava operando corretamente até o momento da falha. Isso corresponde à descrição '( ) O servidor para de funcionar, mas estava funcionando corretamente até parar.'\n\n2. Por omissão: Este tipo de falha ocorre quando o servidor não consegue responder a requisições que chegam, ou seja, ele omite a resposta. Isso corresponde à descrição '( ) O servidor não consegue responder a requisições que chegam.'\n\n3. De transição de estado: Este tipo de falha ocorre quando o servidor se desvia do fluxo de controle correto, ou seja, ele muda de estado de forma inesperada. Isso corresponde à descrição '( ) O servidor se desvia do fluxo de controle correto.'\n\n4. Arbitrária: Este tipo de falha ocorre quando o servidor produz saídas que nunca deveriam ter sido produzidas e que não podem ser detectadas como incorretas. Isso corresponde à descrição '( ) O servidor produz saídas que nunca deveriam ter produzido, mas não podem ser detectadas como incorretas.'\n\nAssim, a ordem correta de preenchimento dos parênteses é: 2 – 3 – 4 – 1, que corresponde à alternativa D."
  },
  {
    "edicao": 2018,
    "id": "2018-64",
    "numero": 64,
    "enunciado": "Quando um processo na máquina A chama um procedimento na máquina B, o\nprocesso chamador em A é suspenso, e a execução do procedimento chamado ocorre em B.\nInformações podem ser transportadas do chamador para quem foi chamado nos parâmetros e\npodem voltar no resultado do procedimento. Absolutamente nada da troca de mensagens é visível\npara o programador. Esse método é conhecido como:",
    "alternativas": [
      "a) Chamada de Procedimento Remoto (RPC).",
      "b) Protocolo Universal de Datagramas (UDP).",
      "c) Protocolo de Transporte em Tempo Real (RTP).",
      "d) Middleware Orientado a Mensagem (MOM).",
      "e) Linguagem de Programação de Interface (IDL)."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Sistemas Distribuídos",
    "subarea": "Comunicação entre Processos",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "A questão descreve um cenário onde um processo em uma máquina A chama um procedimento em uma máquina B, e o processo chamador é suspenso enquanto o procedimento é executado na máquina B. Este é um comportamento típico de uma Chamada de Procedimento Remoto (RPC), onde a comunicação entre processos em diferentes sistemas é feita de forma transparente para o programador. O RPC permite que um programa execute um procedimento em outra máquina como se fosse local, sem que a troca de mensagens seja visível para o programador. As outras alternativas não se encaixam na descrição: UDP é um protocolo de comunicação, RTP é usado para dados em tempo real, MOM é um middleware para troca de mensagens, e IDL é uma linguagem para definir interfaces de software."
  },
  {
    "edicao": 2018,
    "id": "2018-65",
    "numero": 65,
    "enunciado": "Qual protocolo que converte nome em string ASCII em endereço de rede?",
    "alternativas": [
      "a) Stringle.",
      "b) DNS.",
      "c) ARP.",
      "d) IP.",
      "e) TCP."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Redes de Computadores",
    "subarea": "Protocolos e Serviços de Comunicação",
    "dificuldade": "Fácil",
    "gabarito": "B",
    "solucao": "O protocolo que converte nomes de domínio em endereços de rede é o DNS (Domain Name System). Quando um usuário digita um nome de domínio em um navegador, o DNS é responsável por traduzir esse nome em um endereço IP, que é o identificador numérico usado para localizar e acessar o recurso na rede. O DNS funciona como uma agenda telefônica da internet, permitindo que os usuários utilizem nomes de domínio legíveis em vez de endereços IP numéricos. Portanto, a alternativa correta é a B) DNS."
  },
  {
    "edicao": 2018,
    "id": "2018-66",
    "numero": 66,
    "enunciado": "O aprendizado de máquina, é um campo de estudo que:",
    "alternativas": [
      "a) Oferece aos computadores a habilidade de aprender exatamente a função para a qual foram\nprogramados.",
      "b) Dá aos computadores a habilidade de aprender qualquer problema.",
      "c) Dá aos computadores a habilidade de aprender como um agente deve agir em um ambiente.",
      "d) Dá aos computadores a habilidade de aprender como reduzir erros.",
      "e) Dá aos computadores a habilidade de aprender sem serem explicitamente programados para a\ntarefa."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Inteligência Artificial",
    "subarea": "Aprendizado de Máquina",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "A questão aborda o conceito fundamental do aprendizado de máquina, que é a capacidade dos computadores de aprenderem sem serem explicitamente programados para uma tarefa específica. A alternativa E descreve corretamente essa característica, pois o aprendizado de máquina envolve algoritmos que permitem que sistemas melhorem seu desempenho em tarefas com base em dados, sem instruções explícitas para cada tarefa. As outras alternativas descrevem conceitos que não são precisos ou são apenas parcialmente corretos em relação ao aprendizado de máquina."
  },
  {
    "edicao": 2018,
    "id": "2018-67",
    "numero": 67,
    "enunciado": "Qual é a classe de algoritmos de sincronização que assegura que, em um conjunto\nde processos distribuídos, pelo menos, um processo por vez tem acesso a um recurso\ncompartilhado?",
    "alternativas": [
      "a) Relógios vetoriais.",
      "b) Eleição.",
      "c) Exclusão mútua distribuída.",
      "d) Relógios lógicos.",
      "e) Posicionamento global."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Sistemas Distribuídos",
    "subarea": "Problemas Básicos em Computação Distribuída: Coordenação e Sincronização de Processos, Exclusão Mútua, Difusão de Mensagens",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "A questão está perguntando sobre uma classe de algoritmos de sincronização que garante que, em um conjunto de processos distribuídos, pelo menos um processo por vez tem acesso a um recurso compartilhado. Isso é exatamente o que a exclusão mútua distribuída busca alcançar. A exclusão mútua é um conceito fundamental em sistemas distribuídos e sistemas operacionais, onde se assegura que múltiplos processos ou threads não acessem simultaneamente um recurso crítico, evitando assim condições de corrida e inconsistências. As outras alternativas não se referem diretamente a esse problema: relógios vetoriais e lógicos são usados para ordenação de eventos em sistemas distribuídos, eleição é usada para selecionar um coordenador em um sistema distribuído, e posicionamento global não está relacionado ao controle de acesso a recursos."
  },
  {
    "edicao": 2018,
    "id": "2018-69",
    "numero": 69,
    "enunciado": "Árvores de decisão são algoritmos que utilizam:",
    "alternativas": [
      "a) Estruturas de IF-ELSE para realizar aprendizado.",
      "b) Estruturas de repetição alinhadas para realizar aprendizado.",
      "c) Aprendizado estatístico para construção de regras no aprendizado.",
      "d) Exclusivamente funções matemáticas como estruturas de dados elementares para realizar\naprendizado.",
      "e) Paradigma de programação em lógica para realizar aprendizado."
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Inteligência Artificial",
    "subarea": "Árvores de Decisão, Redes Neurais e Algoritmos Genéticos",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "Árvores de decisão são algoritmos utilizados em aprendizado de máquina que tomam decisões baseadas em condições lógicas, semelhantes a estruturas de IF-ELSE. Cada nó interno da árvore representa uma condição sobre um atributo, cada ramo representa o resultado da condição, e cada folha representa uma classe ou valor de saída. Portanto, a alternativa correta é 'A) Estruturas de IF-ELSE para realizar aprendizado.'."
  },
  {
    "edicao": 2018,
    "id": "2018-70",
    "numero": 70,
    "enunciado": "Considere as assertivas abaixo sobre teste de sistema:\n O teste de ______________ tem por objetivo fazer o software falhar de diferentes maneiras, a\nfim de verificar a capacidade de recuperação do software a um estado normal de funcionamento.\n O teste de ______________ exercita o sistema de forma a observar seu desempenho em\nsituações de demanda anormal de recursos, quer em termos de quantidade, frequência ou\nvolume.\n O teste ___________ exercita o software em cada ambiente ou plataforma no qual deve\nfuncionar. Também pode incluir examinar os procedimentos de instalação, softwares para a\ninstalação (e.g. instaladores), e a documentação usada para apresentar o software ao usuário.\nAssinale a alternativa que preenche, correta e respectivamente, as lacunas das assertivas acima.",
    "alternativas": [
      "a) recuperação – stress – de implantação",
      "b) segurança – stress – beta",
      "c) recuperação – carga – de implantação",
      "d) segurança – carga – de implantação",
      "e) recuperação – stress – beta"
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Engenharia de Software",
    "subarea": "Verificação, Validação e Teste",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "Para resolver a questão, precisamos identificar os tipos de testes mencionados nas assertivas e preencher as lacunas corretamente. A primeira assertiva descreve um teste que visa verificar a capacidade de recuperação do software, o que se refere ao 'teste de recuperação'. A segunda assertiva menciona a avaliação do desempenho do sistema sob demanda anormal de recursos, o que é característico do 'teste de stress'. A terceira assertiva fala sobre testar o software em diferentes ambientes ou plataformas, o que corresponde ao 'teste de implantação'. Portanto, a alternativa correta que preenche as lacunas é a 'A) recuperação – stress – de implantação'."
  }
]