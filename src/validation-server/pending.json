[
  {
    "edicao": 2019,
    "id": "2019-21",
    "numero": 21,
    "enunciado": "Considere os seguintes algoritmos recursivos que resolvem o mesmo problema em\numa entrada de tamanho n:\nAlgoritmo 1: Divide o problema em 3 partes de tamanho n/4 cada e gasta um tempo adicional O(1)\npor chamada.\nAlgoritmo 2: Divide o problema em 3 partes de tamanho n/2 cada e gasta um tempo adicional O(n2)\npor chamada.\nAlgoritmo 3: Divide o problema em 3 partes de tamanho n/3 cada e gasta um tempo adicional de\nO(n) por chamada.\nA complexidade dos algoritmos 1, 2 e 3 é, respectivamente:",
    "alternativas": [
      "a) 𝛩(𝑛𝑙𝑜𝑔43 ), 𝛩(𝑛2), 𝛩(𝑛 𝑙𝑜𝑔 𝑛)\n𝑛 𝑛 𝑛",
      "b) 𝛩 ( ) , 𝛩 ( ) , 𝛩 ( )\n4 2 3",
      "c) 𝛩(1), 𝛩(𝑛2), 𝛩(𝑛)",
      "d) 𝛩(𝑛4), 𝛩(𝑛2), 𝛩(𝑛3)",
      "e) 𝛩(𝑛𝑙𝑜𝑔43), 𝛩(𝑛𝑙𝑜𝑔23), 𝛩(𝑛𝑙𝑜𝑔33)"
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Análise de Algoritmos",
    "subarea": "Uso de Relações de Recorrência para Análise de Algoritmos Recursivos",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Para resolver a questão, precisamos analisar a complexidade de cada algoritmo usando o Teorema Mestre. \n\nAlgoritmo 1: Divide o problema em 3 partes de tamanho n/4 cada e gasta um tempo adicional O(1) por chamada. A relação de recorrência é T(n) = 3T(n/4) + O(1). Aplicando o Teorema Mestre, temos a = 3, b = 4, f(n) = O(1). Como f(n) = O(n^c) com c = 0, e a comparação entre n^log_b(a) = n^log_4(3) e f(n) mostra que f(n) é menor, estamos no caso 1 do Teorema Mestre. Assim, T(n) = Θ(n^log_4(3)).\n\nAlgoritmo 2: Divide o problema em 3 partes de tamanho n/2 cada e gasta um tempo adicional O(n^2) por chamada. A relação de recorrência é T(n) = 3T(n/2) + O(n^2). Aplicando o Teorema Mestre, temos a = 3, b = 2, f(n) = O(n^2). Aqui, n^log_b(a) = n^log_2(3), que é menor que f(n) = O(n^2), então estamos no caso 3 do Teorema Mestre. Assim, T(n) = Θ(n^2).\n\nAlgoritmo 3: Divide o problema em 3 partes de tamanho n/3 cada e gasta um tempo adicional O(n) por chamada. A relação de recorrência é T(n) = 3T(n/3) + O(n). Aplicando o Teorema Mestre, temos a = 3, b = 3, f(n) = O(n). Aqui, n^log_b(a) = n, que é igual a f(n), então estamos no caso 2 do Teorema Mestre. Assim, T(n) = Θ(n log n).\n\nPortanto, a complexidade dos algoritmos 1, 2 e 3 é, respectivamente, Θ(n^log_4(3)), Θ(n^2), Θ(n log n), que corresponde à alternativa A."
  },
  {
    "edicao": 2019,
    "id": "2019-25",
    "numero": 25,
    "enunciado": "Considere a seguinte função em C:\nvoid funcao(int n){\nint i,j;\nfor (i=1; i<=n; i++)\nfor(j=1; j<log(i); j++)\nprintf(“%d”,i+j)\n}\nA complexidade dessa função é:",
    "alternativas": [
      "a) 𝛩(𝑛)",
      "b) 𝛩(𝑛 𝑙𝑜𝑔 𝑛)",
      "c) 𝛩(𝑙𝑜𝑔 𝑛)",
      "d) 𝛩(𝑛2)",
      "e) 𝛩(𝑛2𝑙𝑜𝑔 𝑛)"
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Análise de Algoritmos",
    "subarea": "Análise Assintótica de Limites de Complexidade",
    "dificuldade": "Média",
    "gabarito": "A",
    "solucao": "Para determinar a complexidade da função fornecida, precisamos analisar os loops aninhados. O loop externo 'for (i=1; i<=n; i++)' itera 'n' vezes. O loop interno 'for(j=1; j<log(i); j++)' depende do valor de 'i'. A função 'log(i)' é o logaritmo natural de 'i', que cresce muito lentamente. Para cada valor de 'i', o loop interno executa 'log(i) - 1' vezes. Portanto, o número total de iterações do loop interno para todos os valores de 'i' é a soma de 'log(i) - 1' para 'i' de 1 a 'n'. Esta soma é aproximadamente proporcional a 'n', pois a soma dos logaritmos de 1 a 'n' é 'log(n!)', que é aproximadamente 'n log(n)'. No entanto, como o loop interno executa apenas até 'log(i)', a contribuição principal para a complexidade vem do loop externo, resultando em uma complexidade de 𝛩(𝑛)."
  },
  {
    "edicao": 2018,
    "id": "2018-25",
    "numero": 25,
    "enunciado": "Para medir o custo de execução de um algoritmo, é comum definir uma função de\ncomplexidade f, em que f(n) é a medida de tempo necessário para executar um algoritmo para um\nproblema de tamanho n. Considere as afirmações abaixo sobre funções de complexidade:\nI. Se f(n) é uma medida de quantidade de tempo necessário para executar um algoritmo em um\nproblema de tamanho n, então f é chamada função de complexidade de tempo.\nII. Se f(n) é uma medida de quantidade de memória necessária para executar um algoritmo de\ntamanho n, então f é chamada função de complexidade de espaço.\nIII. A complexidade de tempo não representa o tempo diretamente, mas é estimada pelo número\nde vezes que determinada operação relevante é executada.\nQuais estão corretas?",
    "alternativas": [
      "a) Apenas I.",
      "b) Apenas II.",
      "c) Apenas III.",
      "d) Apenas I e II.",
      "e) I, II e III."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Análise de Algoritmos",
    "subarea": "Medidas de Complexidade",
    "dificuldade": "Fácil",
    "gabarito": "E",
    "solucao": "Vamos analisar cada uma das afirmações: \n\nI. A afirmação diz que se f(n) é uma medida de quantidade de tempo necessário para executar um algoritmo em um problema de tamanho n, então f é chamada função de complexidade de tempo. Isso está correto, pois a complexidade de tempo é exatamente a função que descreve como o tempo de execução de um algoritmo cresce com o tamanho da entrada.\n\nII. A afirmação diz que se f(n) é uma medida de quantidade de memória necessária para executar um algoritmo de tamanho n, então f é chamada função de complexidade de espaço. Isso também está correto, pois a complexidade de espaço refere-se à quantidade de memória que um algoritmo utiliza em relação ao tamanho da entrada.\n\nIII. A afirmação diz que a complexidade de tempo não representa o tempo diretamente, mas é estimada pelo número de vezes que determinada operação relevante é executada. Isso também está correto. A complexidade de tempo geralmente não mede o tempo real em segundos, mas sim o número de operações fundamentais (como comparações ou atribuições) que um algoritmo realiza, o que é uma estimativa indireta do tempo de execução.\n\nPortanto, todas as três afirmações estão corretas."
  },
  {
    "edicao": 2018,
    "id": "2018-37",
    "numero": 37,
    "enunciado": "Sobre ordenação topológica em grafos, é correto afirmar que:",
    "alternativas": [
      "a) A busca em largura é utilizada para obter a ordenação topológica de um grafo direcionado\nacíclico.",
      "b) A ordenação topológica de um grafo pode ser vista como uma ordenação de suas arestas ao\nlongo de uma linha horizontal, de tal forma que todos os vértices estão classificados em ordem\ncrescente.",
      "c) A ordenação topológica de um grafo direcionado acíclico G=(V,A) é uma ordenação linear de\ntodos os seus vértices tal que G contém uma aresta (u, v), então u aparece antes de v.",
      "d) A busca binária é utilizada para obter a ordenação topológica de um grafo cíclico não direcionado.",
      "e) O algoritmo para obter a ordenação topológica de um grafo direcionado usa o transposto do grafo\nque consiste de todas as arestas com as suas direções invertidas."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Teoria dos Grafos",
    "subarea": "Ordenação Topológica",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "A ordenação topológica é uma ordenação linear dos vértices de um grafo direcionado acíclico (DAG) tal que, para cada aresta (u, v), o vértice u aparece antes do vértice v na ordenação. A alternativa C descreve corretamente essa definição. Alternativa A está incorreta porque a busca em profundidade é geralmente utilizada para obter a ordenação topológica, não a busca em largura. Alternativa B está incorreta porque a ordenação topológica não é uma ordenação de arestas, mas sim de vértices. Alternativa D está incorreta porque a busca binária não é utilizada para ordenação topológica, e grafos cíclicos não têm ordenação topológica. Alternativa E está incorreta porque o transposto do grafo não é utilizado no processo de ordenação topológica."
  },
  {
    "edicao": 2018,
    "id": "2018-44",
    "numero": 44,
    "enunciado": "Considere um computador no qual o interpretador do nível 0 (hardware\ninterpretando o microcódigo) gasta 20 nanosegundos (20x10-9 segundos) por microinstrução, e o\ninterpretador do nível 1 (microcódigo interpretando a linguagem de máquina convencional)\nnecessita de 25 microinstruções para interpretar uma instrução de máquina convencional. Um\nprograma teste, já em linguagem de máquina convencional, leva 50 segundos para executar.\na) Quanto tempo levará o programa teste para executar se o tempo para executar uma\nmicroinstrução for aumentado para 30 nanosegundos?\nb) Quanto tempo levará o programa teste para executar se uma instrução de máquina convencional\nnecessitar de somente 15 microinstruções para ser interpretada?",
    "alternativas": [
      "a) a) T = 60 segundos e b) 15 segundos.",
      "b) a) T = 65 segundos e b) 20 segundos.",
      "c) a) T = 70 segundos e b) 25 segundos.",
      "d) a) T = 75 segundos e b) 30 segundos.",
      "e) a) T = 80 segundos e b) 35 segundos."
    ],
    "area_conhecimento": "Fundamentos da Computação",
    "area": "Arquitetura e Organização de Computadores",
    "subarea": "Organização de Computadores",
    "dificuldade": "Média",
    "gabarito": "C",
    "solucao": "Para resolver a questão, precisamos calcular o tempo de execução do programa teste em dois cenários diferentes. \n\nPrimeiro, vamos entender o cenário inicial: \n- O interpretador do nível 0 gasta 20 nanosegundos por microinstrução. \n- O interpretador do nível 1 necessita de 25 microinstruções para interpretar uma instrução de máquina convencional. \n- O programa teste leva 50 segundos para executar. \n\nAgora, vamos calcular o tempo total de execução em cada cenário: \n\na) Se o tempo para executar uma microinstrução for aumentado para 30 nanosegundos: \n- O tempo para executar uma instrução de máquina convencional será 25 microinstruções * 30 nanosegundos = 750 nanosegundos por instrução. \n- No cenário original, o tempo por instrução era 25 microinstruções * 20 nanosegundos = 500 nanosegundos por instrução. \n- O aumento no tempo de execução é de 750/500 = 1.5 vezes. \n- Portanto, o novo tempo de execução do programa será 50 segundos * 1.5 = 75 segundos. \n\nb) Se uma instrução de máquina convencional necessitar de somente 15 microinstruções: \n- O tempo para executar uma instrução de máquina convencional será 15 microinstruções * 20 nanosegundos = 300 nanosegundos por instrução. \n- No cenário original, o tempo por instrução era 500 nanosegundos. \n- A redução no tempo de execução é de 300/500 = 0.6 vezes. \n- Portanto, o novo tempo de execução do programa será 50 segundos * 0.6 = 30 segundos. \n\nAssim, a alternativa correta é 'C) a) T = 75 segundos e b) 30 segundos.'"
  },
  {
    "edicao": 2018,
    "id": "2018-70",
    "numero": 70,
    "enunciado": "Considere as assertivas abaixo sobre teste de sistema:\n O teste de ______________ tem por objetivo fazer o software falhar de diferentes maneiras, a\nfim de verificar a capacidade de recuperação do software a um estado normal de funcionamento.\n O teste de ______________ exercita o sistema de forma a observar seu desempenho em\nsituações de demanda anormal de recursos, quer em termos de quantidade, frequência ou\nvolume.\n O teste ___________ exercita o software em cada ambiente ou plataforma no qual deve\nfuncionar. Também pode incluir examinar os procedimentos de instalação, softwares para a\ninstalação (e.g. instaladores), e a documentação usada para apresentar o software ao usuário.\nAssinale a alternativa que preenche, correta e respectivamente, as lacunas das assertivas acima.",
    "alternativas": [
      "a) recuperação – stress – de implantação",
      "b) segurança – stress – beta",
      "c) recuperação – carga – de implantação",
      "d) segurança – carga – de implantação",
      "e) recuperação – stress – beta"
    ],
    "area_conhecimento": "Tecnologia de Computação",
    "area": "Engenharia de Software",
    "subarea": "Verificação, Validação e Teste",
    "dificuldade": "Fácil",
    "gabarito": "A",
    "solucao": "Para resolver a questão, precisamos identificar os tipos de testes mencionados nas assertivas e preencher as lacunas corretamente. A primeira assertiva descreve um teste que visa verificar a capacidade de recuperação do software, o que se refere ao 'teste de recuperação'. A segunda assertiva menciona a avaliação do desempenho do sistema sob demanda anormal de recursos, o que é característico do 'teste de stress'. A terceira assertiva fala sobre testar o software em diferentes ambientes ou plataformas, o que corresponde ao 'teste de implantação'. Portanto, a alternativa correta que preenche as lacunas é a 'A) recuperação – stress – de implantação'."
  }
]